// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`subscribe("key") 1`] = `
<Provider
  id="key"
  message="success!"
>
  <RenderPure>
    <SubscribeWrap
      id="key"
    >
      <Component
        id="key"
        message="success!"
        setState={[Function]}
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      id="key"
      select={[Function]}
      to="key"
    >
      <SubscribeWrap
        id="key"
      >
        <Component
          id="key"
          message="success!"
          setState={[Function]}
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe("key", "state") 1`] = `
<Provider
  id="key"
  message="success!"
>
  <RenderPure>
    <SubscribeWrap
      id="key"
    >
      <Component
        id="key"
        state={
          Object {
            "message": "success!",
            "setState": [Function],
          }
        }
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      id="key"
      select="state"
      to="key"
    >
      <SubscribeWrap
        id="key"
      >
        <Component
          id="key"
          state={
            Object {
              "message": "success!",
              "setState": [Function],
            }
          }
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe("key", store => store) 1`] = `
<Provider
  id="key"
  message="success!"
>
  <RenderPure>
    <SubscribeWrap
      id="key"
    >
      <Component
        id="key"
        message="success!"
        setState={[Function]}
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      id="key"
      select={[Function]}
      to="key"
    >
      <SubscribeWrap
        id="key"
      >
        <Component
          id="key"
          message="success!"
          setState={[Function]}
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe("state") 1`] = `
<Provider
  message="success!"
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        state={
          Object {
            "message": "success!",
            "setState": [Function],
          }
        }
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select="state"
      to={
        Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_changedBits": 0,
          "_currentRenderer": Object {},
          "_currentValue": undefined,
          "_defaultValue": undefined,
        }
      }
    >
      <SubscribeWrap>
        <Component
          state={
            Object {
              "message": "success!",
              "setState": [Function],
            }
          }
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe() 1`] = `
<Provider
  message="success!"
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        message="success!"
        setState={[Function]}
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select={[Function]}
      to={
        Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_changedBits": 0,
          "_currentRenderer": Object {},
          "_currentValue": undefined,
          "_defaultValue": undefined,
        }
      }
    >
      <SubscribeWrap>
        <Component
          message="success!"
          setState={[Function]}
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe([a,b], (a,b) => props) 1`] = `
<Provider
  count={0}
  id="id1"
  up={[Function]}
>
  <RenderPure>
    <Provider
      count={0}
      id="id2"
      up={[Function]}
    >
      <RenderPure>
        <SubscribeWrap>
          <Component
            store1={
              Object {
                "count": 0,
                "setState": [Function],
                "up": [Function],
              }
            }
            store2={
              Object {
                "count": 0,
                "setState": [Function],
                "up": [Function],
              }
            }
          >
            <button
              onClick={[Function]}
            >
              0
               
              0
            </button>
          </Component>
        </SubscribeWrap>
        <Subscribe
          select={[Function]}
          to={
            Array [
              "id1",
              "id2",
            ]
          }
        >
          <SubscribeWrap>
            <Component
              store1={
                Object {
                  "count": 0,
                  "setState": [Function],
                  "up": [Function],
                }
              }
              store2={
                Object {
                  "count": 0,
                  "setState": [Function],
                  "up": [Function],
                }
              }
            >
              0 0
            </Component>
          </SubscribeWrap>
        </Subscribe>
      </RenderPure>
    </Provider>
  </RenderPure>
</Provider>
`;

exports[`subscribe([a,b], (a,b) => props) 2`] = `
<Provider
  count={0}
  id="id1"
  up={[Function]}
>
  <RenderPure>
    <Provider
      count={0}
      id="id2"
      up={[Function]}
    >
      <RenderPure>
        <SubscribeWrap>
          <Component
            store1={
              Object {
                "count": 1,
                "setState": [Function],
                "up": [Function],
              }
            }
            store2={
              Object {
                "count": 1,
                "setState": [Function],
                "up": [Function],
              }
            }
          >
            <button
              onClick={[Function]}
            >
              1
               
              1
            </button>
          </Component>
        </SubscribeWrap>
        <Subscribe
          select={[Function]}
          to={
            Array [
              "id1",
              "id2",
            ]
          }
        >
          <SubscribeWrap>
            <Component
              store1={
                Object {
                  "count": 1,
                  "setState": [Function],
                  "up": [Function],
                }
              }
              store2={
                Object {
                  "count": 1,
                  "setState": [Function],
                  "up": [Function],
                }
              }
            >
              1 1
            </Component>
          </SubscribeWrap>
        </Subscribe>
      </RenderPure>
    </Provider>
  </RenderPure>
</Provider>
`;

exports[`subscribe([a,b], [a,b]) 1`] = `
<Provider
  count={0}
  id="id1"
  up={[Function]}
>
  <RenderPure>
    <Provider
      count={0}
      id="id2"
      up={[Function]}
    >
      <RenderPure>
        <SubscribeWrap>
          <Component
            store1={
              Object {
                "count": 0,
                "setState": [Function],
                "up": [Function],
              }
            }
            store2={
              Object {
                "count": 0,
                "setState": [Function],
                "up": [Function],
              }
            }
          >
            <button
              onClick={[Function]}
            >
              0
               
              0
            </button>
          </Component>
        </SubscribeWrap>
        <Subscribe
          select={
            Array [
              "store1",
              "store2",
            ]
          }
          to={
            Array [
              "id1",
              "id2",
            ]
          }
        >
          <SubscribeWrap>
            <Component
              store1={
                Object {
                  "count": 0,
                  "setState": [Function],
                  "up": [Function],
                }
              }
              store2={
                Object {
                  "count": 0,
                  "setState": [Function],
                  "up": [Function],
                }
              }
            >
              0 0
            </Component>
          </SubscribeWrap>
        </Subscribe>
      </RenderPure>
    </Provider>
  </RenderPure>
</Provider>
`;

exports[`subscribe([a,b], [a,b]) 2`] = `
<Provider
  count={0}
  id="id1"
  up={[Function]}
>
  <RenderPure>
    <Provider
      count={0}
      id="id2"
      up={[Function]}
    >
      <RenderPure>
        <SubscribeWrap>
          <Component
            store1={
              Object {
                "count": 1,
                "setState": [Function],
                "up": [Function],
              }
            }
            store2={
              Object {
                "count": 1,
                "setState": [Function],
                "up": [Function],
              }
            }
          >
            <button
              onClick={[Function]}
            >
              1
               
              1
            </button>
          </Component>
        </SubscribeWrap>
        <Subscribe
          select={
            Array [
              "store1",
              "store2",
            ]
          }
          to={
            Array [
              "id1",
              "id2",
            ]
          }
        >
          <SubscribeWrap>
            <Component
              store1={
                Object {
                  "count": 1,
                  "setState": [Function],
                  "up": [Function],
                }
              }
              store2={
                Object {
                  "count": 1,
                  "setState": [Function],
                  "up": [Function],
                }
              }
            >
              1 1
            </Component>
          </SubscribeWrap>
        </Subscribe>
      </RenderPure>
    </Provider>
  </RenderPure>
</Provider>
`;

exports[`subscribe(AnyContext, "context") 1`] = `
<ModuleContext>
  <Component
    context={
      Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      }
    }
  >
    <SubscribeWrap>
      <Component
        context={
          Object {
            "context": "success!",
          }
        }
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select="context"
      to={[Function]}
    >
      <SubscribeWrap>
        <Component
          context={
            Object {
              "context": "success!",
            }
          }
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </Component>
</ModuleContext>
`;

exports[`subscribe(AnyContext, context => context) 1`] = `
<ModuleContext>
  <Component
    context={
      Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      }
    }
  >
    <SubscribeWrap>
      <Component
        context="success!"
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select={[Function]}
      to={[Function]}
    >
      <SubscribeWrap>
        <Component
          context="success!"
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </Component>
</ModuleContext>
`;

exports[`subscribe(AnyContextObjectValue) 1`] = `
<ModuleContext>
  <Component
    context={
      Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      }
    }
  >
    <SubscribeWrap>
      <Component
        context="success!"
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select={[Function]}
      to={[Function]}
    >
      <SubscribeWrap>
        <Component
          context="success!"
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </Component>
</ModuleContext>
`;

exports[`subscribe(AnyContextSingleValue) 1`] = `
<ModuleContext>
  <Component
    context={
      Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      }
    }
  >
    <SubscribeWrap>
      <Component
        context="success"
      >
        success
      </Component>
    </SubscribeWrap>
    <Subscribe
      select={[Function]}
      to={[Function]}
    >
      <SubscribeWrap>
        <Component
          context="success"
        >
          success
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </Component>
</ModuleContext>
`;

exports[`subscribe(ProviderContext) 1`] = `
<Provider
  message="success!"
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        message="success!"
        setState={[Function]}
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select={[Function]}
      to={
        Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_changedBits": 0,
          "_currentRenderer": Object {},
          "_currentValue": undefined,
          "_defaultValue": undefined,
        }
      }
    >
      <SubscribeWrap>
        <Component
          message="success!"
          setState={[Function]}
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe(ProviderContext, "state") 1`] = `
<Provider
  message="success!"
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        state={
          Object {
            "message": "success!",
            "setState": [Function],
          }
        }
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select="state"
      to={
        Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_changedBits": 0,
          "_currentRenderer": Object {},
          "_currentValue": undefined,
          "_defaultValue": undefined,
        }
      }
    >
      <SubscribeWrap>
        <Component
          state={
            Object {
              "message": "success!",
              "setState": [Function],
            }
          }
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe(ProviderContext, context => context) 1`] = `
<Provider
  message="success!"
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        message="success!"
        setState={[Function]}
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select={[Function]}
      to={
        Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_changedBits": 0,
          "_currentRenderer": Object {},
          "_currentValue": undefined,
          "_defaultValue": undefined,
        }
      }
    >
      <SubscribeWrap>
        <Component
          message="success!"
          setState={[Function]}
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe(store => store) 1`] = `
<Provider
  message="success!"
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        message="success!"
        setState={[Function]}
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select={[Function]}
      to={
        Object {
          "$$typeof": Symbol(react.context),
          "Consumer": [Circular],
          "Provider": Object {
            "$$typeof": Symbol(react.provider),
            "_context": [Circular],
          },
          "_calculateChangedBits": null,
          "_changedBits": 0,
          "_currentRenderer": Object {},
          "_currentValue": undefined,
          "_defaultValue": undefined,
        }
      }
    >
      <SubscribeWrap>
        <Component
          message="success!"
          setState={[Function]}
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe(store) 1`] = `
<Provider
  store={
    Object {
      "context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "testStore",
      "state": Object {
        "message": "success!",
        "setState": [Function],
      },
      "subscribe": [Function],
      "subscriptions": Set {
        [Function],
      },
    }
  }
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        message="success!"
        setState={[Function]}
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select={[Function]}
      to={
        Object {
          "context": Object {
            "$$typeof": Symbol(react.context),
            "Consumer": [Circular],
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_changedBits": 0,
            "_currentRenderer": Object {},
            "_currentValue": undefined,
            "_defaultValue": undefined,
          },
          "destroy": [Function],
          "getState": [Function],
          "id": "testStore",
          "state": Object {
            "message": "success!",
            "setState": [Function],
          },
          "subscribe": [Function],
          "subscriptions": Set {
            [Function],
          },
        }
      }
    >
      <SubscribeWrap>
        <Component
          message="success!"
          setState={[Function]}
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe(store, "state") 1`] = `
<Provider
  store={
    Object {
      "context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "testStore",
      "state": Object {
        "message": "success!",
        "setState": [Function],
      },
      "subscribe": [Function],
      "subscriptions": Set {
        [Function],
      },
    }
  }
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        state={
          Object {
            "message": "success!",
            "setState": [Function],
          }
        }
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select="state"
      to={
        Object {
          "context": Object {
            "$$typeof": Symbol(react.context),
            "Consumer": [Circular],
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_changedBits": 0,
            "_currentRenderer": Object {},
            "_currentValue": undefined,
            "_defaultValue": undefined,
          },
          "destroy": [Function],
          "getState": [Function],
          "id": "testStore",
          "state": Object {
            "message": "success!",
            "setState": [Function],
          },
          "subscribe": [Function],
          "subscriptions": Set {
            [Function],
          },
        }
      }
    >
      <SubscribeWrap>
        <Component
          state={
            Object {
              "message": "success!",
              "setState": [Function],
            }
          }
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;

exports[`subscribe(store, context => context) 1`] = `
<Provider
  store={
    Object {
      "context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "testStore",
      "state": Object {
        "message": "success!",
        "setState": [Function],
      },
      "subscribe": [Function],
      "subscriptions": Set {
        [Function],
      },
    }
  }
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        message="success!"
        setState={[Function]}
      >
        success!
      </Component>
    </SubscribeWrap>
    <Subscribe
      select={[Function]}
      to={
        Object {
          "context": Object {
            "$$typeof": Symbol(react.context),
            "Consumer": [Circular],
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_changedBits": 0,
            "_currentRenderer": Object {},
            "_currentValue": undefined,
            "_defaultValue": undefined,
          },
          "destroy": [Function],
          "getState": [Function],
          "id": "testStore",
          "state": Object {
            "message": "success!",
            "setState": [Function],
          },
          "subscribe": [Function],
          "subscriptions": Set {
            [Function],
          },
        }
      }
    >
      <SubscribeWrap>
        <Component
          message="success!"
          setState={[Function]}
        >
          success!
        </Component>
      </SubscribeWrap>
    </Subscribe>
  </RenderPure>
</Provider>
`;
