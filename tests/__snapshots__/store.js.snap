// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`async action 1`] = `
<Provider
  async={[Function]}
  count={0}
  functional={[Function]}
  simple={[Function]}
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        async={[Function]}
        count={0}
        functional={[Function]}
        setState={[Function]}
        simple={[Function]}
      >
        <button
          onClick={[Function]}
        >
          0
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`async action 2`] = `
<Provider
  async={[Function]}
  count={0}
  functional={[Function]}
  simple={[Function]}
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        async={[Function]}
        count={1}
        functional={[Function]}
        setState={[Function]}
        simple={[Function]}
      >
        <button
          onClick={[Function]}
        >
          1
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`await actions & access state 1`] = `
<Provider
  async={[Function]}
  count={0}
  functional={[Function]}
  simple={[Function]}
>
  <RenderPure>
    <SubscribeWrap>
      <_class2
        async={[Function]}
        count={0}
        functional={[Function]}
        setState={[Function]}
        simple={[Function]}
      >
        <div>
          0
          <button
            onClick={[Function]}
          />
        </div>
      </_class2>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`await actions & access state 2`] = `
<Provider
  async={[Function]}
  count={0}
  functional={[Function]}
  simple={[Function]}
>
  <RenderPure>
    <SubscribeWrap>
      <_class2
        async={[Function]}
        count={4}
        functional={[Function]}
        setState={[Function]}
        simple={[Function]}
      >
        <div>
          4
          <button
            onClick={[Function]}
          />
        </div>
      </_class2>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`external store 1`] = `
<Provider
  store={
    Object {
      "context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "externalTest",
      "state": Object {
        "async": [Function],
        "count": 0,
        "functional": [Function],
        "setState": [Function],
        "simple": [Function],
      },
      "subscribe": [Function],
      "subscriptions": Set {
        [Function],
      },
    }
  }
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        async={[Function]}
        count={0}
        functional={[Function]}
        setState={[Function]}
        simple={[Function]}
      >
        <button
          onClick={[Function]}
        >
          0
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`external store 2`] = `
<Provider
  store={
    Object {
      "context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "externalTest",
      "state": Object {
        "async": [Function],
        "count": 2,
        "functional": [Function],
        "setState": [Function],
        "simple": [Function],
      },
      "subscribe": [Function],
      "subscriptions": Set {},
    }
  }
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        async={[Function]}
        count={2}
        functional={[Function]}
        setState={[Function]}
        simple={[Function]}
      >
        <button
          onClick={[Function]}
        >
          2
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`external store, setState 1`] = `
<Provider
  store={
    Object {
      "context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "externalTest2",
      "state": Object {
        "count": 0,
        "setState": [Function],
      },
      "subscribe": [Function],
      "subscriptions": Set {
        [Function],
      },
    }
  }
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        count={0}
        setState={[Function]}
      >
        <button
          onClick={[Function]}
        >
          0
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`external store, setState 2`] = `
<Provider
  store={
    Object {
      "context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": [Circular],
        "Provider": Object {
          "$$typeof": Symbol(react.provider),
          "_context": [Circular],
        },
        "_calculateChangedBits": null,
        "_changedBits": 0,
        "_currentRenderer": Object {},
        "_currentValue": undefined,
        "_defaultValue": undefined,
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "externalTest2",
      "state": Object {
        "count": 1,
        "setState": [Function],
      },
      "subscribe": [Function],
      "subscriptions": Set {
        [Function],
      },
    }
  }
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        count={1}
        setState={[Function]}
      >
        <button
          onClick={[Function]}
        >
          1
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`functional action 1`] = `
<Provider
  async={[Function]}
  count={0}
  functional={[Function]}
  simple={[Function]}
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        async={[Function]}
        count={0}
        functional={[Function]}
        setState={[Function]}
        simple={[Function]}
      >
        <button
          onClick={[Function]}
        >
          0
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`functional action 2`] = `
<Provider
  async={[Function]}
  count={0}
  functional={[Function]}
  simple={[Function]}
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        async={[Function]}
        count={1}
        functional={[Function]}
        setState={[Function]}
        simple={[Function]}
      >
        <button
          onClick={[Function]}
        >
          1
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`mount/unmount 1`] = `<App />`;

exports[`no actions, setState 1`] = `
<Provider
  count={0}
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        count={0}
        setState={[Function]}
      >
        <button
          onClick={[Function]}
        >
          0
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`no actions, setState 2`] = `
<Provider
  count={0}
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        count={1}
        setState={[Function]}
      >
        <button
          onClick={[Function]}
        >
          1
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`renders properly 1`] = `
<Provider
  count={0}
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        count={0}
        setState={[Function]}
      >
        0
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`simple action 1`] = `
<Provider
  async={[Function]}
  count={0}
  functional={[Function]}
  simple={[Function]}
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        async={[Function]}
        count={0}
        functional={[Function]}
        setState={[Function]}
        simple={[Function]}
      >
        <button
          onClick={[Function]}
        >
          0
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;

exports[`simple action 2`] = `
<Provider
  async={[Function]}
  count={0}
  functional={[Function]}
  simple={[Function]}
>
  <RenderPure>
    <SubscribeWrap>
      <Component
        async={[Function]}
        count={1}
        functional={[Function]}
        setState={[Function]}
        simple={[Function]}
      >
        <button
          onClick={[Function]}
        >
          1
        </button>
      </Component>
    </SubscribeWrap>
  </RenderPure>
</Provider>
`;
